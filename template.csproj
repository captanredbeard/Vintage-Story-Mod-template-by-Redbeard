<Project Sdk="Microsoft.NET.Sdk">
  <!-- Mod info -->
  <PropertyGroup>
    <ModName>$projectname$</ModName>
    <ModType>code</ModType>
    <ModVersion>0.0.0</ModVersion>
    <ModId>$projectname$</ModId>
    <Description></Description>
    <Side>universal</Side>
    <RequiredOnClient>true</RequiredOnClient>
    <RequiredOnServer>true</RequiredOnServer>
  </PropertyGroup>

  <!-- Authors -->
  <ItemGroup>
    <ModInfoAuthors Include="Author" />
  </ItemGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <Dependencies Include="game" Version="*" />
  </ItemGroup>

  <!-- Project settings -->
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <!-- Loading local settings file -->
  <Import Project="Properties\localSettings.props" Condition="Exists('Properties\localSettings.props')" />
  
  <!-- Paths -->
  <PropertyGroup>
    <ProjectDir>$(MSBuildProjectDirectory)</ProjectDir>
    <OutputDir>bin\$(Configuration)\Mods</OutputDir>
    <OutputPath>$(OutputDir)\$(ModId)</OutputPath>
    <AssetsDir>$(ProjectDir)\resources\assets</AssetsDir>
    <ModIconFile>$(ProjectDir)\resources\modicon.png</ModIconFile>
    <ReleasesDir>$(ProjectDir)\Releases</ReleasesDir>
    <ReleaseFile>$(ModId)_$(ModVersion)</ReleaseFile>
    <ReleasePath>$(ReleasesDir)\$(ReleaseFile).zip</ReleasePath>
    <ReleasePathDev>$(ReleasesDir)\$(ReleaseFile)_dev.zip</ReleasePathDev>
    <ExternalLibDir>$(ProjectDir)\external</ExternalLibDir>
    <GameDirectory Condition="'$(GameDirectory)' == ''">$(VINTAGE_STORY)</GameDirectory>
  </PropertyGroup>

  <!-- Startup settings -->
  <PropertyGroup>
    <DataFolder>$(AppData)\$(DataFolderName)</DataFolder>
    <AditionalModsFolder>$(AppData)\$(DataFolderName)\Mods</AditionalModsFolder>
    <WorldName>test_$(ModId)</WorldName>
    <ModDir>$(ProjectDir)\$(OutputDir)</ModDir>
    <EnterWorldCommand Condition="'$(EnterWorldOnStartup)' == 'true'">"-o" "$(WorldName)"</EnterWorldCommand>
  </PropertyGroup>

  <!-- Formatting JSON files -->
  <PropertyGroup>
    <Scripts>$(ProjectDir)\scripts</Scripts>
    <Formatter>$(Scripts)\formatter.ps1</Formatter>
  </PropertyGroup>
  <ItemGroup>
    <AssetsToFormat Include="$(AssetsDir)\$(ModId)\blocktypes" />
    <AssetsToFormat Include="$(AssetsDir)\$(ModId)\itemtypes" />
    <AssetsToFormat Include="$(AssetsDir)\$(ModId)\patches" />
    <AssetsToFormat Include="$(AssetsDir)\$(ModId)\entities" />
    <AssetsToFormat Include="$(AssetsDir)\$(ModId)\config\animations" />
  </ItemGroup>

  <!-- References to libraries that are being used in project -->
  <ItemGroup>
    <PackageReference Include="VSImGui" Version="0.0.6" />
    <Reference Include="$(GameDirectory)/**/*.dll" Private="false" Condition="'$(GameDirectory)' != ''" />
    <Reference Include="$(ExternalLibDir)/**/*.dll" Private="false" Condition="'$(ExternalLibDir)' != ''" />
    <Folder Include="resources\assets\$projectname$" />
  </ItemGroup>

  <!-- Creating local settings file -->
  <Target Name="EnsureSettingsJson" BeforeTargets="ModInfo" Condition="!Exists('Properties\localSettings.props')">
    <MakeDir Directories="Properties" />
    <WriteLinesToFile File="Properties\localSettings.props" Overwrite="true" Lines="&lt;Project&gt;&#xD;&#xA;  &lt;PropertyGroup&gt;&#xD;&#xA;    &lt;RunFormatter&gt;false&lt;/RunFormatter&gt;&#xD;&#xA;    &lt;DataFolderName&gt;VintagestoryData&lt;/DataFolderName&gt;&#xD;&#xA;    &lt;GameDirectory&gt;&lt;/GameDirectory&gt;&#xD;&#xA;    &lt;PackageDevBuild&gt;false&lt;/PackageDevBuild&gt;&#xD;&#xA;    &lt;EnterWorldOnStartup&gt;false&lt;/EnterWorldOnStartup&gt;&#xD;&#xA;    &lt;JsonIndent&gt;2&lt;/JsonIndent&gt;&#xD;&#xA;    &lt;JsonMaxLineLength&gt;200&lt;/JsonMaxLineLength&gt;&#xD;&#xA;  &lt;/PropertyGroup&gt;&#xD;&#xA;&lt;/Project&gt;" />
    <Error Text="Local settings file was missing, generated a new one. Run build again." />
  </Target>

  <!-- Forces rebuild -->
  <Target Name="ForceRebuild" BeforeTargets="BeforeBuild">
    <Touch Files="@(Compile)" AlwaysCreate="true" />
  </Target>

  <!-- Creates/updates modinfo.json file in build directory -->
  <Target Name="ModInfo" BeforeTargets="CopyFilesToOutput">
    <PropertyGroup>
      <ModInfo>
{
  "type": "$(ModType)",
  "name": "$(ModName)",
  "modid": "$(ModId)",
  "version": "$(ModVersion)",

  "description": "$(Description)",
  "authors": [ @(ModInfoAuthors->'"%(Identity)"', ', ') ],

  "dependencies": {
    @(Dependencies->'"%(Identity)": "%(Version)"', ', ')
  },

  "side" : "$(Side)",
  "requiredOnClient": $(RequiredOnClient),
  "requiredOnServer": $(RequiredOnServer)
}
      </ModInfo>
    </PropertyGroup>
    <RemoveDir Directories="$(OutputDir)" />
    <Message Text="Generating modinfo.json" Importance="high" />
    <WriteLinesToFile File="$(OutputPath)/modinfo.json" Lines="$(ModInfo)" Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>

  <!-- Formats asssets files -->
  <Target Name="Format" AfterTargets="ModInfo" BeforeTargets="CopyFilesToOutput">
    <Exec Condition="'$(OS)' == 'Windows_NT' and '$(RunFormatter)' == 'true'" Command="powershell -NoProfile -ExecutionPolicy Bypass -File &quot;$(Formatter)&quot; -Path &quot;%(AssetsToFormat.Identity)&quot; -Indent $(JsonIndent) -MaxLength $(JsonMaxLineLength)" />
  </Target>

  <!-- Copies modicon, assets folder and native libraries if they exist into output directory -->
  <Target Name="CopyFilesToOutput" AfterTargets="Format" BeforeTargets="BeforeBuild">
    <RemoveDir Directories="$(OutputPath)assets" />
    <Copy SourceFiles="$(ModIconFile)" DestinationFolder="$(OutputPath)" Condition="Exists('$(ModIconFile)')" />
    <!-- Windows symlink -->
    <Exec Condition="'$(OS)' == 'Windows_NT'" Command="mklink /D &quot;$(OutputPath)assets&quot; &quot;$(ProjectDir)\resources\assets&quot;" />
    <!-- Linux/macOS symlink -->
    <Exec Condition="'$(OS)' != 'Windows_NT'" Command="ln -s &quot;$(OutputPath)/assets&quot; &quot;$(ProjectDir)/resources/assets&quot;" />
  </Target>

  <!-- Archives output directory into zip and puts it into Releases folder -->
  <Target Name="ZipFiles" AfterTargets="Build" Condition=" '$(Configuration)' == 'Release' ">
    <Message Text="Pachaging into '$(ReleaseFile)'" Importance="high" />
    <MakeDir Directories="$(ReleasesDir)" />
    <Delete Files="$(ReleasePath)" />
    <ZipDirectory SourceDirectory="$(OutputPath)" DestinationFile="$(ReleasePath)" />
  </Target>
  <Target Name="ZipFilesDev" AfterTargets="Build" Condition=" '$(Configuration)' == 'Debug' and '$(PackageDevBuild)' == 'true'">
    <Message Text="Pachaging into '$(ReleaseFile)'" Importance="high" />
    <MakeDir Directories="$(ReleasesDir)" />
    <Delete Files="$(ReleasePathDev)" />
    <ZipDirectory SourceDirectory="$(OutputPath)" DestinationFile="$(ReleasePathDev)" />
  </Target>
</Project>